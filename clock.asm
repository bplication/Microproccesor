
; SETTINGS
	PROCESSOR	16F876A
; BANK 0
INDF	EQU	00H
TIMER0	EQU	01H
PCL	EQU	02H
STATUS	EQU	03H
FSR	EQU	04H
PORTA	EQU	05H
PORTB	EQU 	06H
PORTC	EQU 	07H
PCLATH	EQU	0AH
INTCON	EQU	0BH
; BANK 1
OPTIONR	EQU 	81H
TRISA	EQU	85H
TRISB	EQU	86H
TRISC	EQU	87H
EECON1	EQU	88H
EECON2	EQU	89H
ADCON1	EQU	9FH
; INCLUDE STATUS BITS
IRP		EQU	.7
RP1		EQU 	.6
RP0		EQU 	.5
ZF		EQU	.2
AC		EQU	.1
CF		EQU	.0
; MODE SPECIFIER
W		EQU 	.0
F		EQU 	.1
; INTCON REGISTER BITS
GIE		EQU	.7
T0IE		EQU	.5
T0IF		EQU	.2
; USER VARIABLES
INT_CNT	EQU 20H				; ### NOT USED NOW.
SWITCH	EQU 21H				; LED SWITCH IN INTERRUPT
							; TO DISPLAY THESE EXACTLY
							; IN 1 SECONDS

YEARHI	EQU 	22H				; SAVE XX OF YEAR XXYY
YEARLO	EQU 	23H				; SAVE YY OF YEAR XXYY
MONTH	EQU	24H
DAY	EQU	25H
HOUR	EQU 	26H				; HOUR VALUE 
MINUTE	EQU 	27H				; MINUTE VALUE
SECOND	EQU 	28H				; SECOND VALUE

MODES	EQU 	29H

SW1MODE	EQU 	2AH				; B'00000001' DISPLAY TIME(D)
							; B'00000010' DISPLAY DATE
							; B'00000100' DISPLAY YEAR
							; B'00001000' DISPLAY SEC
SW2MODE	EQU 	2BH				; IN CHANGE TIME MODE..
							; B'00000001' CHANGE YEAR
							; B'00000010' CHANGE MONTH
							; B'00000100' CHANGE DAY
							; B'00001000' CHANGE HOUR
							; B'00010000' CHANGE MINUTE
							; B'00100000' CHANGE SECOND
							; IN CHANGE ALARM MODE..
							; B'00000001' CHANGE HOUR
							; B'00000010' CHANGE MINUTE
SW3MODE	EQU 	2CH

INPUTED	EQU	2DH				; INPUT FLAG SWITCH INPUTED
							; IF FLAG 0, NOT INPUTED
							; IF FLAG 1, ALREADY INPUTED
Y_10HI	EQU 	2EH
Y_10LO	EQU 	2FH
M_10MON	EQU 	30H
D_10DAY	EQU 	31H
H_10HUR	EQU 	32H				; DEVIDED HOUR 10'S RADIX NUM
M_10MIN	EQU 	33H				; DEVIDED MIN  10'S RADIX NUM
D_10SEC	EQU	34H				; DEVIDED SEC  10'S RADIX NUM

Y_01HI	EQU 	35H
Y_01LO	EQU 	36H
M_01MON	EQU 	37H
D_01DAY	EQU 	38H
H_01HUR	EQU 	39H				; DEVIDED HOUR 01'S RADIX NUM
M_01MIN	EQU 	3AH				; DEVIDED MIN  01'S RADIX NUM
D_01SEC	EQU 	3BH				; DEVIDED SEC  01'S RADIX NUM

SEGMNT4	EQU	3CH			
SEGMNT3	EQU 	3DH
SEGMNT2	EQU 	3EH
SEGMNT1	EQU 	3FH

TMP_CNT	EQU 	40H				; TEMPORARY COUNTER
TMP_VAL	EQU 	41H				; TEMPORARY VALUE CONTAINER
W_TEMP	EQU	42H	
ST_TMP	EQU 	43H
DP_TMP	EQU	44H
DELAY1	EQU 	45H	
DELAY2	EQU 	46H
DELAY3	EQU 	47H

GENERAL_SWITCH_MODE EQU 48H	; 001 : SWITCH MODE 0 TIME
							; 010 : SWITCH MODE 1 SET
							; 100 : SWITCH MODE 2 ?
SW2TIME 	EQU 49H
ALARM_FLAG 	EQU 4AH			; FLAG CHECKS IN
							; ALARM SETTING MODE WHEN
							; PUSHED SWITCH 2

ALARM_HOUR 	EQU 4BH			; ALARM SET HOUR
ALARM_MIN	EQU 4CH			; ALARM SET MINUTES
ALARM_MODE	EQU 4DH			; IS ALARM MODE? 1(T)/0(F)
ALARM_H_10HUR	EQU 57H
ALARM_M_10MIN	EQU 58H
ALARM_H_01HUR	EQU	5EH
ALARM_M_01MIN	EQU 5FH
ALARM_ONED	EQU 60H

; LED IDENTIFICATION ARBITARY BITS
_A		EQU .7				; TO RC7
_B		EQU .6				; TO RC6
_C		EQU .5				; TO RC5
_D		EQU .4				; TO RC1
_E		EQU .3				; TO RC0
_F		EQU .2				; TO RC2
_G		EQU .1				; TO RA1
_DP		EQU .0				; TO RA0
; 7-SEGMENT DISPLAY SWITCH BITS
DISP1	EQU .3
DISP2	EQU .2
DISP3	EQU .1
DISP4	EQU .0
; RA0 BUZZER BIT
BUZZ	EQU .4
; PORTB SWITCH BITS
SW1		EQU .3
SW2		EQU .4
SW3		EQU .5
; TICK LIMIT
_SECOND EQU 53H
_MINUTE EQU 54H
_HOUR	EQU 55H

; INITIAL I/O SETTING
; 
		ORG		00H
		GOTO	MAINSET

; *******************************************************
; INTERRUPT-INTERRUPT :: INTERRUPT TO DISPLAY LEDS
; *******************************************************
		ORG		04H
		MOVWF	W_TEMP		; SAVE W AND STATUS
		SWAPF	STATUS, W
		MOVWF	ST_TMP

		; BUNGI
		BTFSC	GENERAL_SWITCH_MODE, .0 ; SW1 NOT SET
		GOTO	INTERRUPT_MODE_SWITCH_1
		BTFSC	GENERAL_SWITCH_MODE, .1 ; SW2 NOT SET
		GOTO	INTERRUPT_MODE_SWITCH_2
		BTFSC	GENERAL_SWITCH_MODE, .2	; SW3 NOT SET
		GOTO	INTERRUPT_MODE_SWITCH_3
		GOTO	INTERRUPT_END_ROUTINE

; SUBROUTINE :: CHECK MONTH FINALDAY
UNIV_CHECK_MONTH_FINALDAY
		MOVF	MONTH, W	; DAY => W
		ADDWF	PCL, F		; PCL + MONTH
		NOP
		RETLW	.32			; JANUARY
		RETLW	.29			; FEB
		RETLW	.32			; MARCH
		RETLW	.31			; APRIL
		RETLW	.32			; MAY
		RETLW	.31			; JUNE
		RETLW	.32			; JULY
		RETLW	.32			; AUGUST
		RETLW	.31			; ...
		RETLW	.32
		RETLW	.31
		RETLW	.32			; DECEMBER

INTERRUPT_MODE_SWITCH_1
		BTFSC	SW1MODE, .0 ; IF SW1 MODE IS NOT TIME
		GOTO	INTERRUPT_DISPLAY_TIME
		BTFSC	SW1MODE, .1 ; IF SW1 MODE IS NOT TIMEms
		GOTO	INTERRUPT_DISPLAY_TIMEms
		BTFSC	SW1MODE, .2	; IF SW1 MODE IS NOT DATE
		GOTO	INTERRUPT_DISPLAY_DATE
		BTFSC	SW1MODE, .3	; IF SW1 MODE IS NOT YEAR
		GOTO	INTERRUPT_DISPLAY_YEAR
		BTFSC	SW1MODE, .4	; IF SW1 MODE IS NOT SECOND
		GOTO	INTERRUPT_DISPLAY_SECOND
		GOTO	INTERRUPT_END_ROUTINE

INTERRUPT_MODE_SWITCH_2
		;BTFSC	ALARM_FLAG, .0
		;GOTO	INTERRUPT_ALARM
		; IF ALARM_FLAG IS NOT SET
		BTFSC	SW2MODE, .0	; IF SW2 MODE IS YEAR
		GOTO	INTERRUPT_DISPLAY_YEAR
		BTFSC	SW2MODE, .1 ; IF SW2 MODE IS MONTH
		GOTO	INTERRUPT_DISPLAY_DATE
		BTFSC	SW2MODE, .2 ; IF SW2 MODE IS DAY
		GOTO	INTERRUPT_DISPLAY_DATE
		BTFSC	SW2MODE, .3 ; IF SW2 MODE IS HOUR
		GOTO	INTERRUPT_DISPLAY_TIME
		BTFSC	SW2MODE, .4 ; IF SW2 MODE IS MINUTE
		GOTO	INTERRUPT_DISPLAY_TIME
		BTFSC	SW2MODE, .5 ; IF SW2 MODE IS SECOND
		GOTO	INTERRUPT_DISPLAY_SECOND
		GOTO	INTERRUPT_END_ROUTINE

INTERRUPT_MODE_SWITCH_3
		BTFSC	SW3MODE, .0	; IF ALARM MODE IS HOUR
		GOTO	INTERRUPT_DISPLAY_ALARM_TIME
		BTFSC	SW3MODE, .1 ; IF ALARM MODE IS MINUTE
		GOTO	INTERRUPT_DISPLAY_ALARM_TIME
		GOTO	INTERRUPT_END_ROUTINE

INTERRUPT_END_ROUTINE
		SWAPF	ST_TMP, W	; RESTORE W AND STATUS
		MOVWF	STATUS
		SWAPF	W_TEMP, F
		SWAPF	W_TEMP, W
		BCF		INTCON, T0IF; DISABLE T0IF INTERRUPT
		RETFIE				; ENABLE GIE.
							; BSF INTCON, GIE
							; RETURN IS NOT RECOMMENDED

; INTERRUPT-SUBROUTINE :: ALARM MODE ::
INTERRUPT_DISPLAY_ALARM_TIME
		MOVF	ALARM_H_10HUR, W
		MOVWF	SEGMNT4
		MOVF	ALARM_H_01HUR, W
		MOVWF	SEGMNT3
		MOVF	ALARM_M_10MIN, W
		MOVWF	SEGMNT2
		MOVF	ALARM_M_01MIN, W
		MOVWF	SEGMNT1

		GOTO	INTERRUPT_COMMON_DISPLAY_LED

; INTERRUPT-SUBROUTINE :: SWITCH 01 MODE ::
; INTERRUPT-SUBROUTINE :: SWITCH 02 MODE (NORMAL) ::
INTERRUPT_DISPLAY_TIMEms
		MOVF	M_10MIN, W
		MOVWF	SEGMNT4
		MOVF	M_01MIN, W
		MOVWF	SEGMNT3
		MOVF	D_10SEC, W
		MOVWF	SEGMNT2
		MOVF	D_01SEC, W
		MOVWF	SEGMNT1

		GOTO	INTERRUPT_COMMON_DISPLAY_LED

INTERRUPT_DISPLAY_TIME
		MOVF	H_10HUR, W
		MOVWF	SEGMNT4
		MOVF	H_01HUR, W
		MOVWF	SEGMNT3
		MOVF	M_10MIN, W
		MOVWF	SEGMNT2
		MOVF	M_01MIN, W
		MOVWF	SEGMNT1

		GOTO	INTERRUPT_COMMON_DISPLAY_LED

INTERRUPT_DISPLAY_DATE
		MOVF	M_10MON, W
		MOVWF	SEGMNT4
		MOVF	M_01MON, W
		MOVWF	SEGMNT3
		MOVF	D_10DAY, W
		MOVWF	SEGMNT2
		MOVF	D_01DAY, W
		MOVWF	SEGMNT1

		GOTO	INTERRUPT_COMMON_DISPLAY_LED

INTERRUPT_DISPLAY_YEAR
		MOVF	Y_10HI, W
		MOVWF	SEGMNT4
		MOVF	Y_01HI, W
		MOVWF	SEGMNT3
		MOVF	Y_10LO, W
		MOVWF	SEGMNT2
		MOVF	Y_01LO, W
		MOVWF	SEGMNT1		

		GOTO	INTERRUPT_COMMON_DISPLAY_LED

INTERRUPT_DISPLAY_SECOND
		MOVF	D_10SEC, W
		MOVWF	SEGMNT4
		MOVF	D_01SEC, W
		ADDLW	B'00000001'
		MOVWF	SEGMNT3
		MOVF	D_10SEC, W
		MOVWF	SEGMNT2
		MOVF	D_01SEC, W
		MOVWF	SEGMNT1

		GOTO	INTERRUPT_COMMON_DISPLAY_LED

INTERRUPT_COMMON_DISPLAY_LED
		CALL	DISPLAY_VALUE_TO_LED
		GOTO	INTERRUPT_END_ROUTINE

; *******************************************************
; INTERRUPT-SUBROUTINE :: DISPLAY VALUES TO LEDS
; A	  B	  C	  D	  E	  F	  G	  DP
; RC7 RC6 RC5 RC1 RC0 RC2 RA1 RA0
; *******************************************************
DISPLAY_VALUE_TO_LED
		MOVLW	B'11111100' ; RESET LED PINS
		ANDWF	PORTA, F
		MOVLW	B'00011000'
		ANDWF	PORTC, F
		MOVLW	B'00000110'
		IORWF	PORTB, F
		MOVLW	B'00001100'
		IORWF	PORTA, F

		BTFSC	SWITCH, DISP1
		GOTO	DISPLAY_HOUR10
		BTFSC	SWITCH, DISP2
		GOTO	DISPLAY_HOUR01
		BTFSC	SWITCH, DISP3
		GOTO	DISPLAY_MINUTE10
		GOTO	DISPLAY_MINUTE01

; DISPLAY ROUTINE
DISPLAY_HOUR10
		MOVF	SEGMNT4, W
		CALL	DISPLAY
		MOVLW	B'11110111'	; PORT 1
		ANDWF	PORTA
		RRF		SWITCH, F	; PREPARE SWITCH TO PORT 2
		RETURN

DISPLAY_HOUR01
		MOVF	SEGMNT3, W
		CALL	DISPLAY
		CALL	FLICK_DOT
		MOVLW	B'11111011'	; PORT 2
		ANDWF	PORTA
		RRF		SWITCH, F	; PREPARE SWITCH TO PORT 3
		RETURN

DISPLAY_MINUTE10
		MOVF	SEGMNT2, W
		CALL	DISPLAY
		MOVLW	B'00000010'	; PORT 3
		MOVWF	PORTB
		RRF		SWITCH, F	; PREPARE SWITCH TO PORT 4
		RETURN

DISPLAY_MINUTE01
		MOVF	SEGMNT1, W
		CALL	DISPLAY
		CALL	FLICK_DOT
		MOVLW	B'00000100'	; PORT 4
		MOVWF	PORTB

		MOVLW	B'00001000'	; RESET SWITCH TO PORT 1
		MOVWF	SWITCH
		
		BTFSC 	GENERAL_SWITCH_MODE, .0
		INCF	INT_CNT
		RETURN

; LOOKUP TABLE
LOOKUP	ADDWF	PCL, F
		RETLW	B'00000011'	; 0
		RETLW 	B'10011111'	; 1
		RETLW 	B'00100101'	; 2
		RETLW 	B'00001101'	; 3
		RETLW 	B'10011001'	; 4
		RETLW 	B'01001001'	; 5
		RETLW 	B'01000001'	; 6
		RETLW 	B'00011111'	; 7
		RETLW 	B'00000001'	; 8
		RETLW 	B'00001001'	; 9

DISPLAY	CALL	LOOKUP
		MOVWF	DP_TMP
		COMF	DP_TMP, F	; LED HAS ANODE-CATHOD
							; SO MUST COMPLEMENT.
		; FROM A TO DP CONSIST IN
		; A	  B	  C	  D	  E	  F	  G	  DP
		; RC7 RC6 RC5 RC1 RC0 RC2 RA1 RA0
		; WE HAVE TO SEPARATE CHUNK TO PROPER PINS
		MOVLW	B'11100000'
		ANDWF	DP_TMP, W
		BTFSC	DP_TMP, _D
		IORLW	B'00010000'
		BTFSC	DP_TMP, _E
		IORLW	B'00001000'
		BTFSC	DP_TMP, _F
		IORLW	B'00000100'
		BTFSC	DP_TMP, _G
		BSF		PORTA, _G
		BTFSC	DP_TMP, _DP
		BSF		PORTA, _DP
		MOVWF	PORTC
		RETURN

FLICK_DOT
		MOVF	INT_CNT, W
		SUBLW	.125		
		BTFSS	STATUS, CF	; IF BORROW(N) IS 1
		BSF		PORTA, _DP
		RETURN

; *******************************************************
; MAIN SETTING
; *******************************************************
    MAINSET BSF		STATUS, RP0
		MOVLW	B'00000000'
		MOVWF	TRISA
		MOVLW	.0
		MOVWF	TRISC
		MOVLW	B'10111000' ; PUSH SWITCH RB5, RB4, RB3
							; 'S MODE MUST BE INPUT.
		MOVWF	TRISB		
		MOVLW	07H
		MOVWF	ADCON1		; 07F => ADCON1
							; ENABLE DIGITAL OF ALL PORT
		MOVLW	B'00000001'	; 1/4 INSTRUCTION FREQUENCY
		MOVWF	OPTIONR
		BCF		STATUS, RP0
		MOVLW	B'00010000'
		ANDWF	PORTA
		MOVLW	B'00000001'
		MOVWF	DAY
		MOVWF	MONTH
		MOVWF	GENERAL_SWITCH_MODE ; SET TIME MODE
		MOVWF	SW1MODE		; SW1 DEFAULT MODE IS "TIME"
		MOVWF	SW2MODE		; SW2 DEFAULT IS YEAR N HOUR
		
		MOVLW	B'00011111'
		BSF		INTCON, T0IE; ENABLE TIMER0 INTERRUPT
		BSF		INTCON, GIE	; ENABLE GLOBAL INTERRUPT
		CALL	CLEAR_CUSTOM_VARIABLE

; MAIN PROGRAM
; ACTUAL MAIN PROGRAM (STACK 0)
MAIN	BTFSC	ALARM_ONED, .0
		BCF		PORTA, BUZZ
		CALL	CALL_INPUT_SWITCHES
		CLRF	SW2TIME
		MOVF	INT_CNT, W
		SUBLW	.250
		BTFSS	STATUS, ZF
		GOTO	MAIN		; IF SWITCH PUSHED
								; IF TIME UP
		CLRF	INT_CNT
		CALL	TICK_CLOCK
		CALL	UNIV_DIVIDE_TIME
		CALL	UNIV_DIVIDE_DATE
		BSF	PORTA, BUZZ
		GOTO	MAIN

; MAIN-SUBROUTINE :: INPUT_SWITCHES (STACK 1)
; 
CALL_INPUT_SWITCHES
		MOVF	PORTB, W
		ANDLW	B'00111000'	; SW1, 2, 3 => BIT 3, 4, 5
		SUBLW	B'00111000'
		BTFSC	STATUS, ZF	; SOMETHING INPUTED
		GOTO	RESET_INPUTED_FLAG
		BTFSC	INPUTED, .0	; IF FLAG IS NOT UP
		RETURN
		BTFSS	PORTB, SW1
		GOTO	SW1_MAIN
		BTFSS	PORTB, SW2
		GOTO	SW2_SETTING
		BTFSS	PORTB, SW3
		GOTO	SW3_MAIN
		RETURN

RESET_INPUTED_FLAG
		BCF		INPUTED, .0	; FLAG RESET
		RETURN

; *******************************************************
; SWITCH 1 :: INPUT_SWITCHES-SW1MODE (STACK 1)
; CHANGE_DISPLAY_MODE
; *******************************************************
SW1_MAIN
		MOVLW	B'00000001'
		MOVWF	GENERAL_SWITCH_MODE
		BSF		INPUTED, .0	; UP INPUTED FLAG
		BCF		STATUS, CF	; RESET CARRY
		RLF		SW1MODE, F
		BTFSC	SW1MODE, .5	; IF SW1MODE NOT OUT OF RANGE
		GOTO	SW1_RESET_DISPLAY_MODE
		RETURN

SW1_RESET_DISPLAY_MODE
		MOVLW	B'00000001'
		MOVWF	SW1MODE
		RETURN

; *******************************************************
; SWITCH 2 :: CHANGE_TIME_ALARM (STACK 1) MAIN
; CHANGE_TIME_N_ALARM_MODE
; DOES NOT SET UP INPUTED FLAG IN ADVANCE!
; *******************************************************
SW2_SETTING
		BSF		INPUTED, .0	; UP INPUTED
		BTFSC	ALARM_ONED, .0
		GOTO	ALARM_SHUTDOWN
		GOTO	SW2_CHANGE_TIME_MODE

ALARM_SHUTDOWN
		BSF		PORTA, BUZZ
		BCF		ALARM_ONED, .0
		RETURN

SW2_RESET_DISPLAY_MODE
		MOVLW	B'00000001'
		MOVWF	SW2MODE
		RETURN

; *******************************************************
; SWITCH 2 :: CHANGE_TIME_MODE (STACK 1) SUB
; *******************************************************
SW2_CHANGE_TIME_MODE
		MOVLW	B'00000010'
		MOVWF	GENERAL_SWITCH_MODE
		MOVLW	B'00000001'
		MOVWF	SW2MODE
SW2_LOOP1:
		CALL	UNIV_DIVIDE_DATE
		CALL	UNIV_DIVIDE_TIME
		MOVF	PORTB, W
		ANDLW	B'00110000'	; SW2, 3 => BIT 4, 5
		SUBLW	B'00110000'
		BTFSC	STATUS, ZF	; SOMETHING INPUTED
		GOTO	SW2_RESET_INPUTED_FLAG

		BTFSC	INPUTED, .0	; IF FLAG IS NOT UP
		GOTO	SW2_LOOP1
		BTFSS	PORTB, SW2	; IF INPUT SWITCH 2
		GOTO	SW2_SHIFT_INTERNAL_MODE
		BTFSS	PORTB, SW3	; IF INPUT SWITCH 3
		GOTO	SW2_INCRASE_SOMETHINGS
		GOTO	SW2_LOOP1

SW2_RESET_INPUTED_FLAG
		BCF		INPUTED, .0	; FLAG RESET
		GOTO	SW2_LOOP1

; SWITCH 2 :: SW2_SHIFT_INTERNAL_MODE SUB
SW2_SHIFT_INTERNAL_MODE
		BSF		INPUTED, .0	; UP INPUTED
		BCF		STATUS, CF	; RESET CARRY
		RLF		SW2MODE, F	; SHIFT SW2MODE
		BTFSS	SW2MODE, .6 ; IF EXCEED MODE LIMIT
		GOTO	SW2_LOOP1

		MOVLW	B'00000001'
		MOVWF	SW2MODE
		MOVWF	GENERAL_SWITCH_MODE
		RETURN				; GOTO MAIN! (STACK 0)

; SWITCH 2 :: SW2_INCRASE_SOMETHINGS SUB
SW2_INCRASE_SOMETHINGS
		BSF		INPUTED, .0	; SET INPUTED FLAG
							; TO PREVENT DUPLICATED INPUT
		BTFSC	SW2MODE, .0 ; YEAR
		GOTO	SW2_INCRASE_YEAR
		BTFSC	SW2MODE, .1 ; MONTH
		GOTO	SW2_INCRASE_MONTH
		BTFSC	SW2MODE, .2 ; DAY
		GOTO	SW2_INCRASE_DAY
		BTFSC	SW2MODE, .3	; HOUR
		GOTO	SW2_INCRASE_HOUR
		BTFSC	SW2MODE, .4 ; MINUTE
		GOTO	SW2_INCRASE_MINUTE
		BTFSC	SW2MODE, .5 ; SECOND
		GOTO	SW2_INCRASE_SECOND
		GOTO	SW2_RESET_DISPLAY_MODE ; OVERCARRY, RESET
		RETURN

SW2_INCRASE_YEAR
		CALL 	UNIV_INCREASE_YEAR	
		MOVF	YEARLO, W	; YEARLOW -> W
		SUBLW	.31
		BTFSS	STATUS, ZF	; IF YEAR IS 2031 (LIMIT)
		GOTO	SW2_LOOP1
		MOVLW	.19
		MOVWF	YEARHI
		MOVLW	.70
		MOVWF	YEARLO
		GOTO	SW2_LOOP1	; RETURN SW2 MAIN LOOP

SW2_INCRASE_MONTH
		INCF	MONTH, F
		MOVF	MONTH, W
		SUBLW	.13
		BTFSS	STATUS, ZF	; IF DECEMBER + 1 MONTH, SKIP
		GOTO	SW2_LOOP1
		CLRF	MONTH
		INCF	MONTH
		GOTO	SW2_LOOP1

SW2_INCRASE_DAY
		INCF	DAY, F
		CALL	UNIV_CHECK_MONTH_FINALDAY
		SUBWF	DAY, W
		BTFSS	STATUS, ZF	; IF DAY IS FINAL DAY, SKIP
		GOTO	SW2_LOOP1
		CLRF	DAY
		INCF	DAY
		GOTO	SW2_LOOP1

SW2_INCRASE_HOUR
		INCF	HOUR, F
		MOVF	HOUR, W
		SUBWF 	_HOUR, W	; _HOUR IS CONSTANT
		BTFSS	STATUS, ZF
		GOTO	SW2_LOOP1
		CLRF	HOUR
		GOTO	SW2_LOOP1

SW2_INCRASE_MINUTE
		INCF	MINUTE, F
		MOVF	MINUTE, W
		SUBWF	_MINUTE, W	; _MINUTE IS CONSTANT
		BTFSS	STATUS, ZF
		GOTO	SW2_LOOP1
		CLRF	MINUTE
		GOTO	SW2_LOOP1

SW2_INCRASE_SECOND
		INCF	SECOND, F
		MOVF	SECOND, W
		SUBWF	_SECOND, W	; _SECOND IS CONSTANT
		BTFSS	STATUS, ZF
		GOTO	SW2_LOOP1
		CLRF	SECOND
		GOTO	SW2_LOOP1

; *******************************************************
; SWITCH 3 :: CHANGE_ALARM_MODE (STACK 1)
; *******************************************************
SW3_MAIN
		MOVLW	B'00000100'
		MOVWF	GENERAL_SWITCH_MODE
		BSF		INPUTED, .0	; UP INPUTED FLAG
		GOTO	ALARM_LOOP
		RETURN

SW3_RESET_DISPLAY_MODE
		MOVLW	B'00000001'
		MOVWF	SW3MODE
		RETURN

OFF_ALARM_RINGING
		BSF		PORTA, BUZZ
		RETURN

ALARM_LOOP:
		CALL	UNIV_DIVIDE_ALARM_TIME
		MOVF	PORTB, W
		ANDLW	B'00111000'	; SW1, 2, 3 => BIT 3, 4, 5
		SUBLW	B'00111000'
		BTFSC	STATUS, ZF	; SOMETHING INPUTED
		GOTO	ALARM_RESET_INPUTED_FLAG
		BTFSC	INPUTED, .0	; IF FLAG IS NOT UP
		GOTO	ALARM_LOOP
		BTFSS	PORTB, SW1	; IF INPUT SWTICH 1
		GOTO	ALARM_TOGGLE_ALARM
		BTFSS	PORTB, SW2	; IF INPUT SWITCH 2
		GOTO	ALARM_SHIFT_INTERNAL_MODE
		BTFSS	PORTB, SW3	; IF INPUT SWITCH 3
		GOTO	ALARM_INCRASE_SOMETHINGS
		GOTO	ALARM_LOOP

ALARM_TOGGLE_ALARM
		BSF		INPUTED, .0
		XORLW	.1
		XORWF	ALARM_FLAG
		GOTO	ALARM_LOOP

ALARM_RESET_INPUTED_FLAG
		BCF		INPUTED, .0	; FLAG RESET
		GOTO	ALARM_LOOP

; SWITCH 3 :: ALARM_SHIFT_INTERNAL_MODE SUB
ALARM_SHIFT_INTERNAL_MODE
		BSF		INPUTED, .0
		BCF		STATUS, CF	; RESET CARRY
		RLF		SW3MODE, F	; SHIFT SW2MODE
		BTFSS	SW3MODE, .2 ; IF EXCEED MODE LIMIT
		GOTO	ALARM_LOOP
		BSF 	ALARM_ONED, .0
		CALL	CHECK_ALARM_ENABLE
		MOVLW	B'00000001'
		MOVWF	SW3MODE
		MOVWF	GENERAL_SWITCH_MODE
		RETURN				; GOTO MAIN! (STACK 0)

; SWITCH 3 :: ALARM_INCRASE_SOMETHINGS SUB
ALARM_INCRASE_SOMETHINGS
		BSF		INPUTED, .0	; SET INPUTED FLAG
							; TO PREVENT DUPLICATED INPUT
		BTFSC	SW3MODE, .0 ; HOUR
		GOTO	ALARM_INCRASE_HOUR
		BTFSC	SW3MODE, .1 ; MINUTE
		GOTO	ALARM_INCRASE_MINUTE
		GOTO	SW3_RESET_DISPLAY_MODE ; OVERCARRY, RESET
		RETURN

ALARM_INCRASE_HOUR
		INCF	ALARM_HOUR, F
		MOVF	ALARM_HOUR, W
		SUBWF 	_HOUR, W	; _HOUR IS CONSTANT
		BTFSS	STATUS, ZF
		GOTO	ALARM_LOOP
		CLRF	ALARM_HOUR
		GOTO	ALARM_LOOP

ALARM_INCRASE_MINUTE
		INCF	ALARM_MIN, F
		MOVF	ALARM_MIN, W
		SUBWF	_MINUTE, W	; _MINUTE IS CONSTANT
		BTFSS	STATUS, ZF
		GOTO	ALARM_LOOP
		CLRF	ALARM_MIN
		GOTO	ALARM_LOOP

; *******************************************************
; MAIN-SUBROUTINE :: TICK TIME
; *******************************************************
TICK_CLOCK
		BCF		PORTA, BUZZ
		INCF	SECOND, F
		MOVF	SECOND, W
		SUBWF	_SECOND, W	; _SECOND IS CONSTANT
		BTFSS	STATUS, ZF
		RETURN

		CLRF	SECOND
		INCF	MINUTE, F
		MOVF	MINUTE, W
		CALL	CHECK_ALARM_ENABLE
		SUBWF	_MINUTE, W	; _MINUTE IS CONSTANT
		BTFSS	STATUS, ZF
		RETURN

		CLRF	SECOND
		CLRF	MINUTE
		INCF	HOUR, F
		MOVF	HOUR, W
		SUBWF 	_HOUR, W	; _HOUR IS CONSTANT
		BTFSS	STATUS, ZF
		RETURN

		CLRF	SECOND
		CLRF	MINUTE
		CLRF	HOUR
		INCF	DAY, F
		CALL	UNIV_CHECK_MONTH_FINALDAY
		SUBWF	DAY, W
		BTFSS	STATUS, ZF	; IF DAY IS FINAL DAY, SKIP
		RETURN

		MOVLW	.1
		MOVWF	DAY
		CLRF 	SECOND
		CLRF	MINUTE
		CLRF	HOUR
		INCF	MONTH, F
		MOVF	MONTH, W
		SUBLW	.13
		BTFSS	STATUS, ZF	; IF DECEMBER + 1 MONTH, SKIP
		RETURN
		
		MOVLW	.1
		MOVWF	DAY
		MOVWF	MONTH
		CLRF	SECOND
		CLRF	MINUTE
		CLRF	HOUR
		CALL	UNIV_INCREASE_YEAR
		RETURN

; SUBROUTINE :: INCREASE YEAR PROPERLY
UNIV_INCREASE_YEAR
		INCF	YEARLO, F	; INCERASE YEAR'S LOW NUMBER
		MOVLW	.100
		SUBWF	YEARLO, W	; YEARLO - 100 = W
		BTFSS	STATUS, ZF	; IF CENTURY, SKIP
		RETURN
		CLRF	YEARLO
		INCF	YEARHI, F	; INCRASE YEAR'S HIGH NUMBER
		RETURN

; SUBROUTINE :: DIVIDE HOUR AND MINUTES AND SECONDS
; 
UNIV_DIVIDE_TIME 
		MOVLW	028H		; SECOND
		CALL	DEVIDE
		MOVLW	027H		; MINUTE
		CALL	DEVIDE
		MOVLW	026H		; HOUR
		CALL	DEVIDE
		RETURN

; SUBROUTINE:: DIVIDE DATE (YEAR, MONTH AND DAY OF MONTH)
; THIS SUBROUTINE EFFECTS PERFORMANCE 
; WITH ENOURMOUS OVERHEAD, SO MUST BE FIXED LATER!!
UNIV_DIVIDE_DATE
		MOVLW	022H		; YEAR HIGH
		CALL	DEVIDE
		MOVLW	023H		; YEAR LOW
		CALL	DEVIDE
		MOVLW	024H		; MONTH
		CALL	DEVIDE
		MOVLW	025H		; DAY
		CALL	DEVIDE
		RETURN

; SUBROUTINE :: DIVIDE ALARM (HOUR , MINUTE)
UNIV_DIVIDE_ALARM_TIME 
		MOVLW	04BH		; ALARM - HOUR
		CALL	DEVIDE
		MOVLW	04CH		; ALARM - MINUTE
		CALL	DEVIDE
		RETURN

; SUB-SUBROUTINE :: DEVIDE 2 RADIX NUMBERS
; INPUT :: NUMBER VARIABLE ADDRESS TO DEVIDE.
DEVIDE	MOVWF	FSR			; INPUT -> FSR INDIRECT ADDR
		CLRF	TMP_CNT		; TMP_CNT = 0
		MOVF	INDF, W		; FSR'S ACTUAL VALUE TO W
		MOVWF	TMP_VAL
		
		MOVLW	.10
DIVLOOP	INCF	TMP_CNT, F	; INCREASE TMP_CNT BY 1
		SUBWF	TMP_VAL, F	; TMP_VAL - 10
		BTFSC	STATUS, CF	; IF BORROW, SKIP
		GOTO	DIVLOOP
		DECF	TMP_CNT		; ARRANGE TMP_CNT
		ADDWF	TMP_VAL, F
		; IN THIS TIME, TMP_VAL HAS 1 RADIX VALUE (0~9)
		; TMP_CNT = 10 VALUE, TMP_VAL = 1 VALUE
		MOVLW	B'00001100'	; 0CH		H D	M M S YH YL
		ADDWF	FSR, F		; FSR + W = 32H 33H 34H"HIGH"
		MOVF	TMP_CNT, W	;			31H	30H	2EH	2FH
		MOVWF	INDF		; TMP_CNT > 32H 33H 34H

		MOVLW	.7
		ADDWF	FSR, F		; FSR + W = 39H 3AH 3BH"LOW"
		MOVF	TMP_VAL, W	;			38H	37H	35H	36H
		MOVWF	INDF		; TMP_VAL > 39H 3AH 3BH
		RETURN

; CHECK ALARM ENABLE
;
CHECK_ALARM_ENABLE
		BTFSC	ALARM_ONED, .0
		RETURN
		BTFSS	ALARM_FLAG, .0
		RETURN
		MOVF	SECOND, W
		SUBLW	.0
		BTFSS	STATUS, ZF	; SECOND == 0 SEC
		RETURN
		MOVF	MINUTE, W
		SUBWF	ALARM_MIN, W
		BTFSS	STATUS, ZF	; ALARM_MIN == MINUTE
		RETURN
		MOVF	HOUR, W
		SUBWF	ALARM_HOUR, F
		BTFSS	STATUS, ZF	; ALARM_HOUR == HOUR
		RETURN
		BSF		ALARM_ONED, .0 	; ALARM ON
		RETURN

; SUBROUTINE :: 5MS DELAY SUBROUTINE
; 
DEL1MS	MOVLW	.10
		MOVWF	DELAY1
DLOOP4	MOVLW	.125
		MOVWF	DELAY2
DLOOP3	NOP
		DECFSZ	DELAY2, F
		GOTO	DLOOP3
		DECFSZ	DELAY1, F
		GOTO	DLOOP4
		RETURN

; SETTING-SUBROUTINE :: CLEAR CUSTOM VARIABLES
; 
CLEAR_CUSTOM_VARIABLE
		MOVLW	.0
		MOVWF	INT_CNT		; CLEAR COUNT
		MOVLW	B'00001000'
		MOVWF	SWITCH

		MOVLW	.12
		MOVWF	HOUR
		MOVLW	.0
		MOVWF	H_10HUR
		MOVWF	H_01HUR
		MOVWF	MINUTE
		MOVWF	M_10MIN
		MOVWF	M_01MIN
		MOVWF	SECOND
		MOVWF	D_10SEC
		MOVWF	D_01SEC
		MOVWF 	ALARM_FLAG
		MOVWF	ALARM_MODE
		MOVWF	ALARM_ONED

		MOVLW	.19
		MOVWF	YEARHI
		MOVLW	.70
		MOVWF	YEARLO
		MOVLW	.1
		MOVWF	MONTH
		MOVWF	DAY

		MOVLW	01H
		MOVWF	SW1MODE

		MOVLW	.0
		MOVWF	SW2TIME

		MOVLW	.60
		MOVWF	_SECOND
		MOVLW	.60
		MOVWF	_MINUTE
		MOVLW	.24
		MOVWF	_HOUR

		MOVLW	.1
		MOVWF	ALARM_FLAG
		MOVLW	.12
		MOVWF	ALARM_HOUR
		MOVLW	.1
		MOVWF	ALARM_MIN
		RETURN
END
